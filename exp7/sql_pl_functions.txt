
Let's go through the entire process step by step, starting with creating the necessary table, inserting dummy data, and then creating and calling functions in Oracle SQL using PL/SQL.

1. Create Table: CUSTOMERS


command 1 ==>	CREATE TABLE CUSTOMERS 
		(
    		ID NUMBER PRIMARY KEY,
    		NAME VARCHAR2(100),
    		AGE NUMBER,
    		ADDRESS VARCHAR2(255),
    		SALARY NUMBER
		);


2. Insert Dummy Data into CUSTOMERS
sql


Copy code
command  2 ==>	 INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		 VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000);
		 INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		VALUES (2, 'Khilan', 25, 'Delhi', 1500);
		INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		VALUES (3, 'Kaushik', 23, 'Kota', 2000);
		INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		VALUES (4, 'Chaitali', 25, 'Mumbai', 6500);
		INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		VALUES (5, 'Hardik', 27, 'Bhopal', 8500);
		INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)
		VALUES (6, 'Komal', 22, 'MP', 4500);



3. Create a Function to Count the Total Number of Customers
Now that we have our CUSTOMERS table populated, let's create a function that counts the total number of customers in the table.




command 3 ==>	CREATE OR REPLACE FUNCTION totalCustomers 
		RETURN NUMBER IS 
   		total NUMBER(2) := 0; 
		BEGIN 
  	 	SELECT count(*) INTO total 
   		FROM CUSTOMERS; 
    		RETURN total; 
		END; 
		/


4. Call the Function in PL/SQL Block




command 4 ==>	DECLARE 
   		c NUMBER(2); 
		BEGIN 
   		c := totalCustomers(); 
   		dbms_output.put_line('Total number of Customers: ' || c); 
		END; 
		/	

When executed, this block will print the total number of customers in the CUSTOMERS table.

5. Create a Function to Find the Maximum of Two Numbers
Let’s now create another function that finds the maximum of two numbers:




command 5 ==>	DECLARE 
   		a NUMBER; 
   		b NUMBER; 
   		c NUMBER; 
   		FUNCTION findMax(x IN NUMBER, y IN NUMBER)  
  	 	RETURN NUMBER 
   		IS 
       		z NUMBER; 
   		BEGIN 
       		IF x > y THEN 
          	z := x; 
       		ELSE 
          	z := y; 
       		END IF;  
       		RETURN z; 
   		END; 
		BEGIN 
   		a := 23; 
   		b := 45;  
   		c := findMax(a, b); 
   		dbms_output.put_line('Maximum of (23, 45): ' || c); 
		END; 
		/	


This function will return and print the maximum of the two numbers you pass as arguments.

6. Create a Recursive Function to Calculate Factorial
The following example demonstrates how to create a recursive function to calculate the factorial of a number:




command 6 ==> 	DECLARE 
   		num NUMBER; 
   		factorial NUMBER;  
   		FUNCTION fact(x NUMBER) 
   		RETURN NUMBER  
   		IS 
       		f NUMBER; 
   		BEGIN 
       		IF x = 0 THEN 
          	f := 1; 
       		ELSE 
          	f := x * fact(x - 1); 
       		END IF; 
       		RETURN f; 
   		END;  
		BEGIN 
   		num := 6; 
   		factorial := fact(num); 
   		dbms_output.put_line('Factorial of ' || num || ' is ' || factorial); 
		END; 
		/


7. Expected Output
For each function call, the PL/SQL block will print the result to the console using dbms_output.put_line. Here’s what the expected output might look like:

For the total number of customers:
mathematical



Total number of Customers: 6
For the maximum of two numbers (23 and 45):


Maximum of (23, 45): 45
For the factorial of 6:


Factorial of 6 is 720




Summary:
Tables: We created the CUSTOMERS table and inserted sample data.
Functions:
A function to count the total customers.
A function to find the maximum of two numbers.
A recursive function to calculate the factorial of a number.
PL/SQL blocks: We demonstrated how to call and use these functions within PL/SQL blocks.