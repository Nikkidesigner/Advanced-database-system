Step-by-Step Process for Oracle 10g:
1. Creating Tables:
In Oracle, you don’t need to worry about AUTO_INCREMENT, as you will use sequences instead. Let’s start with creating the tables.

Create Departments Table

command 1 ==> 	CREATE TABLE Departments 
		(
    		DepartmentID NUMBER PRIMARY KEY,
    		DepartmentName VARCHAR2(100)
		);


Create Employees Table

commamd 2 ==> 	CREATE TABLE Employees 
		(
    		EmployeeID NUMBER PRIMARY KEY,
    		Name VARCHAR2(100),
    		DepartmentID NUMBER,
    		HireDate DATE,
    		Salary NUMBER,
    		FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
		);


Create Sales Table

command 3 ==>	CREATE TABLE Sales 
		(
    		SaleID NUMBER PRIMARY KEY,
    		EmployeeID NUMBER,
    		SaleAmount NUMBER,
    		SaleDate DATE,
    		FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
		);




2. Creating Sequences:
In Oracle, you must create a sequence to generate unique values for primary keys.

Create Sequence for Departments:

command 4 ==>  	CREATE SEQUENCE Dept_Seq
		START WITH 1
		INCREMENT BY 1;




Create Sequence for Employees:


command 5 ==>	CREATE SEQUENCE Emp_Seq
		START WITH 1
		INCREMENT BY 1;



Create Sequence for Sales:


command 6 ==>	CREATE SEQUENCE Sale_Seq
		START WITH 1
		INCREMENT BY 1;







3. Inserting Data Using Sequences:
Now that sequences are created, you can insert data using them.

Insert Data into Departments:



command 7 ==>	INSERT INTO Departments (DepartmentID, DepartmentName) 
		VALUES (Dept_Seq.NEXTVAL, 'Sales');

command 8 ==>	INSERT INTO Departments (DepartmentID, DepartmentName) 
		VALUES (Dept_Seq.NEXTVAL, 'Marketing');


Insert Data into Employees:


commamd 9 ==>	INSERT INTO Employees (EmployeeID, Name, DepartmentID, HireDate, Salary) 
		VALUES (Emp_Seq.NEXTVAL, 'Alice', 1, SYSDATE, 50000);

commamd 10 ==>	INSERT INTO Employees (EmployeeID, Name, DepartmentID, HireDate, Salary) 
		VALUES (Emp_Seq.NEXTVAL, 'Bob', 2, SYSDATE, 60000);


Insert Data into Sales:


command 11 ==>	INSERT INTO Sales (SaleID, EmployeeID, SaleAmount, SaleDate) 
		VALUES (Sale_Seq.NEXTVAL, 1, 3000, SYSDATE);

command 12 ==>	INSERT INTO Sales (SaleID, EmployeeID, SaleAmount, SaleDate) 
		VALUES (Sale_Seq.NEXTVAL, 1, 1500, SYSDATE);

command 13 ==>	INSERT INTO Sales (SaleID, EmployeeID, SaleAmount, SaleDate) 
		VALUES (Sale_Seq.NEXTVAL, 2, 4000, SYSDATE);


4. Select Data:
You can now query the data from the tables:


commamd 14 ==>	SELECT e.Name, d.DepartmentName, SUM(s.SaleAmount) AS TotalSales
		FROM Employees e
		JOIN Departments d ON e.DepartmentID = d.DepartmentID
		LEFT JOIN Sales s ON e.EmployeeID = s.EmployeeID
		GROUP BY e.Name, d.DepartmentName;